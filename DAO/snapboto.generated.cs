// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;

namespace SBT.Shared.DAO
{
    using Gatto.ORM.Schema;
    using Gatto.ORM.Serializer;
    using Gatto.Extensions;
    using Newtonsoft.Json.Linq;
    using Microsoft.VisualBasic;

    // ---------------------------
    // SCHEMA: Snapboto
    // ---------------------------

    public class SnapbotoSchema : Schema
    {
        public static readonly SnapbotoSchema Instance = new SnapbotoSchema();

        public SnapbotoSchema() : base("snapboto")
        {

        }

        /// <summary>
        /// Performs self registration of this schema to the SchemaRegistry.
        /// </summary>
        public void Register()
        {
            CpTicker.Instance.Register();
        }
    }


    // ---------------------------
    // TABLE: CpTicker
    // ---------------------------

    public partial class CpTickerObject : IRMObject
    {
        public int? Id { get; set; }
        public string Name { get; set; }
        public int MarketId { get; set; }
    }

    public partial class CpTicker : ObjectDefinition<CpTickerObject>
    {
        public static readonly CpTicker Instance = new CpTicker();

        static CpTicker()
        {

            Instance.CreatePrimaryIdentifier(Id);
        }

        private CpTicker() : base(SnapbotoSchema.Instance, "cp_ticker")
        {
        }

        new public static ObjectFeature<CpTickerObject, int?> Id
                                  = Instance.AddFeature<int?>("id")
  .SetAutoGenerated(true).Getter(o => o.Id)
                                            .Setter((o, value) => o.Id = value);
        new public static ObjectFeature<CpTickerObject, string> Name
                                  = Instance.AddFeature<string>("name")
                                            .Getter(o => o.Name)
                                            .Setter((o, value) => o.Name = value);
        public static ObjectFeature<CpTickerObject, int> MarketId
                                  = Instance.AddFeature<int>("market_id")
                                            .Getter(o => o.MarketId)
                                            .Setter((o, value) => o.MarketId = value);

        public static IObjectFeature[] _ALL_ = new IObjectFeature[]
        {
            Id,
            Name,
            MarketId
        };

        public override IObjectAliasDefinition CreateAlias(string name) => new CpTickerAlias(name);

    }

    public partial class CpTickerAlias : ObjectAliasDefinition
    {

        public CpTickerAlias(string name = null) : base(name ?? "cp_ticker", CpTicker.Instance)
        {
        }

        new public ObjectFeatureAlias Id => GetFeatureAlias(CpTicker.Id);
        new public ObjectFeatureAlias Name => GetFeatureAlias(CpTicker.Name);
        public ObjectFeatureAlias MarketId => GetFeatureAlias(CpTicker.MarketId);


    }


}